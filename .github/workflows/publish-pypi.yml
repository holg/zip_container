# This file is primarily autogenerated by maturin v1.7.4
# burt heavily edited by me to include the musllinux build
# To update, DO  NOT run, instead edit the file directly
#
#    maturin generate-ci github
#
name: PyPiCI

on:
  push:
    branches:
      - main
      - staging
    tags:
      - '*'
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
          - runner: ubuntu-latest
            target: s390x
          - runner: ubuntu-latest
            target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install pkg-config, SSL and Perl dependencies
        run: sudo apt-get install -y pkg-config libssl-dev libperl-dev cpanminus && sudo cpanm IPC::Cmd
      - name: Install OpenSSL for target
        run: |
          case ${{ matrix.target }} in
            x86_64-unknown-linux-gnu|x86_64-unknown-linux-musl)
              sudo apt-get install -y libssl-dev
              ;;
            aarch64-unknown-linux-gnu)
              sudo apt-get install -y libssl-dev:arm64
              ;;
            armv7-unknown-linux-gnueabihf)
              sudo apt-get install -y libssl-dev:armhf
              ;;
            *)
              echo "Target not supported: ${{ matrix.target }}"
              exit 1
              ;;
          esac
      - name: Print OpenSSL version and directory
        run: |
          openssl version -a
          echo "OPENSSL_DIR=$(openssl version -d | cut -d '\"' -f2)"
      - name: Set OpenSSL directory
        run: echo "OPENSSL_DIR=$(openssl version -d | cut -d '\"' -f2)" >> $GITHUB_ENV
      - name: Print environment variables
        run: printenv
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install pkg-config, SSL and Perl dependencies
        run: sudo apt-get install -y pkg-config libssl-dev libperl-dev cpanminus && sudo cpanm IPC::Cmd
      - name: Set OpenSSL directory
        run:
            case ${{ matrix.platform.target }} in
              x86_64|x86)
                echo "OPENSSL_DIR=/usr/lib/ssl" >> $GITHUB_ENV
                ;;
              aarch64)
                echo "OPENSSL_DIR=/usr/lib/aarch64-linux-gnu/ssl" >> $GITHUB_ENV
                ;;
              armv7)
                echo "OPENSSL_DIR=/usr/lib/arm-linux-gnueabihf/ssl" >> $GITHUB_ENV
                ;;
              s390x)
                echo "OPENSSL_DIR=/usr/lib/s390x-linux-gnu/ssl" >> $GITHUB_ENV
                ;;
              ppc64le)
                echo "OPENSSL_DIR=/usr/lib/powerpc64le-linux-gnu/ssl" >> $GITHUB_ENV
                ;;
            esac
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --features python
          sccache: 'true'
          manylinux: musllinux_1_2
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --features python
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-12
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --features python
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, musllinux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: "startsWith(github.ref, 'refs/tags/')"
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
